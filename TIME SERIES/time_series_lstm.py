# -*- coding: utf-8 -*-
"""time-series-lstm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/186Kvpa5mPFCrA-4_joKU1p6ynXD4_bxS
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/MyDrive/Dicoding/ML Pengembangan'

import numpy as np
import pandas as pd

from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

df = pd.read_csv('AAPL.csv')
print(df)

df.isnull().sum()

is_NaN = df.isnull()
row_has_NaN = is_NaN.any(axis=1)
rows_with_NaN = df[row_has_NaN]

print(rows_with_NaN)

print((df.Open[164]+df.Open[166])/2)

# Mengganti nilai NaN di kolom Open baris 165 dengan rata-rata yang didapatkan
df = df.fillna(value = {'Open': 0.11160700000000001})

#Mengecek apakah nilai sudah terganti
df.Open[165]

df.info()

# Plot data
dates = df['Date'].values
price = df['Open'].values

plt.figure(figsize=(15,5))
plt.plot(dates, price)
plt.title('Open price average', fontsize=20);

# Membagi data menjadi training set dan validation set
from sklearn.model_selection import train_test_split
date_train, date_valid, price_train, price_valid = train_test_split(dates, price, train_size=0.8, test_size = 0.2, shuffle = False )


# Mengubah format data
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

from tensorflow.keras.preprocessing.text import Tokenizer
from keras import regularizers

train_set = windowed_dataset(price_train, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(price_valid, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

model.summary()

# Menghitung MAE
MAE = 0.1*(max(df.Open)-min(df.Open))
print(MAE)

# Menerapkan callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<MAE):
      print("\nMAE sudah dibawah ", MAE , ", train data diberhentikan.")
      self.model.stop_training = True

callbacks = myCallback()

history = model.fit(train_set, epochs=100, callbacks=[callbacks])